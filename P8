from collections import deque

def min_time_to_rot(grid):
    if not grid:
        return -1

    N, M = len(grid), len(grid[0])
    queue = deque()
    fresh_count = 0

    # Enqueue all rotten oranges and count fresh oranges
    for i in range(N):
        for j in range(M):
            if grid[i][j] == 2:
                queue.append((i, j, 0))  # (row, col, time)
            elif grid[i][j] == 1:
                fresh_count += 1

    # Directions: up, down, left, right
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    time_to_rot = 0

    # BFS to rot adjacent fresh oranges
    while queue:
        i, j, time_to_rot = queue.popleft()

        for d in directions:
            ni, nj = i + d[0], j + d[1]
            if 0 <= ni < N and 0 <= nj < M and grid[ni][nj] == 1:
                grid[ni][nj] = 2
                fresh_count -= 1
                queue.append((ni, nj, time_to_rot + 1))

    # If there are still fresh oranges, return -1
    return time_to_rot if fresh_count == 0 else -1

# Hardcoded grid
grid = [
    [2, 1, 1],
    [1, 1, 0],
    [0, 1, 1]
]

print(min_time_to_rot(grid))
