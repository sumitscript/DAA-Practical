def dfs(v, parent, graph, visited):
    visited[v] = True
    for neighbor in graph[v]:
        if not visited[neighbor]:
            if dfs(neighbor, v, graph, visited):
                return True
        elif neighbor != parent:
            return True
    return False

def contains_cycle(graph, V):
    visited = [False] * V
    for i in range(V):
        if not visited[i]:
            if dfs(i, -1, graph, visited):
                return True
    return False

# Hardcoded values
V = 4
graph = [[1, 2], [0, 2], [0, 1, 3], [2]]
print(contains_cycle(graph, V))
