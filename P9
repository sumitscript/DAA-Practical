def min_distance(str1, str2):
    m, n = len(str1), len(str2)
    
    # Initialize the dp array
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    # Base cases for empty substrings
    for i in range(m + 1):
        dp[i][0] = i
    for j in range(n + 1):
        dp[0][j] = j
    
    # Fill the dp array using the algorithm
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if str1[i - 1] == str2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1

    return dp[m][n]

# Hardcoded strings
str1 = "kitten"
str2 = "sitting"

print(min_distance(str1, str2))
